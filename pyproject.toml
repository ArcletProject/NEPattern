[project]
name = "nepattern"
version = "0.6.4"
description = "a complex pattern, support typing"
authors = [
    {name = "RF-Tar-Railt", email = "rf_tar_railt@qq.com"},
]
dependencies = [
    "typing-extensions>=4.5.0",
    "tarina>=0.4.1",
]
requires-python = ">=3.8"
readme = "README.md"
license = {text = "MIT"}
keywords = [
    "typing",
    "pattern",
    "converter",
    "validator"
]
classifiers=[
    "Typing :: Typed",
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
]
[project.urls]
repository = "https://github.com/ArcletProject/NEPattern"

[project.optional-dependencies]
[build-system]
requires = ["pdm-pep517>=1.0.0"]
build-backend = "pdm.pep517.api"

[tool]
[tool.pdm]

[tool.pdm.build]
includes = ["nepattern"]

[tool.pdm.dev-dependencies]
dev = [
    "pytest~=7.1.3",
    "coverage~=6.5.0",
    "fix-future-annotations>=0.5.0",
]

[tool.pdm.scripts]
test = {composite = ["coverage run -m pytest -vv", "coverage xml", "coverage report"]}

[tool.coverage.run]
branch = true
source = ["."]
omit = ["test.py", "./nepattern/context.pyi"]

[tool.coverage.report]

# Regexes for lines to exclude from consideration
exclude_lines = [
    # standard pragma
    "pragma: no cover",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if (typing\\.)?TYPE_CHECKING( is True)?:",
    "\\.\\.\\.",
    "pass",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    # Don't complain overload method / functions
    "@(typing\\.)?overload",
    "def __repr__",
    "def __str__",
    "def __eq__",
    "def __calc_eq__",
    "except ImportError:",
]

[tool.pytest.ini_options]
python_files = "test.py"

[tool.black]
line-length = 110
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'
extend-exclude = '''
'''

[tool.isort]
profile = "black"
line_length = 110
skip_gitignore = true
force_sort_within_sections = true
extra_standard_library = ["typing_extensions"]
